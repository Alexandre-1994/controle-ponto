import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormBuilder, FormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { IonicModule, ToastController } from '@ionic/angular';
import { Employee } from '../../models/employee.model';
import { EmployeeService } from '../../services/employee.service';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.page.html',
  styleUrls: ['./employee.page.scss'],
  standalone: true,
  imports: [CommonModule, FormsModule, ReactiveFormsModule, IonicModule]
})
export class EmployeePage implements OnInit {
  employeeForm: FormGroup;
  employees: Employee[] = [];
  isLoading = false;
  departments = [
    'Administracao',
    'Informatica',
    'Costura',
    'Projecto',
    'Direccao',
    'Seguranca'
  ];

  constructor(
    private formBuilder: FormBuilder,
    private employeeService: EmployeeService,
    private toastController: ToastController
  ) {
    this.employeeForm = this.formBuilder.group({
      name: ['', Validators.required],
      position: ['', Validators.required],
      department: ['', Validators.required]
    });
  }

  ngOnInit() {
    this.loadEmployees();
  }

  async loadEmployees() {
    try {
      this.isLoading = true;
      this.employees = await this.employeeService.getEmployees();
    } catch (error) {
      this.showToast('Erro ao carregar funcionários', 'danger');
    } finally {
      this.isLoading = false;
    }
  }

  async onSubmit() {
    if (this.employeeForm.valid) {
      try {
        await this.employeeService.createEmployee(this.employeeForm.value);
        this.showToast('Funcionário cadastrado com sucesso', 'success');
        this.employeeForm.reset();
        this.loadEmployees();
      } catch (error) {
        this.showToast('Erro ao cadastrar funcionário', 'danger');
      }
    }
  }

  createEmployee() {
    if (this.employeeForm.valid) {
      const employee: Employee = {
        name: this.employeeForm.get('name')?.value,
        position: this.employeeForm.get('position')?.value,
        department: this.employeeForm.get('department')?.value,
        internal_code: '' // Will be generated by service
      };
      // ...existing code...
    }
  }

  private async showToast(message: string, color: string) {
    const toast = await this.toastController.create({
      message,
      duration: 2000,
      color
    });
    toast.present();
  }
}